
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

TOKEN = os.getenv("TELEGRAM_TOKEN")

ASK_PREVIOUS = 0
ASK_CAPSULES_OR_LENGTH = 1
ASK_DENSITY = 2
ASK_DESIRED_LENGTH = 3

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏—è –≤–æ–ª–æ—Å. –ù–∞—Ä–∞—â–∏–≤–∞–ª–∏ –ª–∏ –≤—ã —Ä–∞–Ω—å—à–µ –≤–æ–ª–æ—Å—ã?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return ASK_PREVIOUS

async def ask_capsules_or_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    user_data[update.effective_chat.id] = {'previous_extension': answer}

    if answer == '–î–∞':
        await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∫–∞–ø—Å—É–ª –∏–ª–∏ –≥—Ä–∞–º–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å?")
    else:
        reply_keyboard = [['–í–æ–ª–æ—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —É—à–∏', '–í—ã—à–µ –ø–ª–µ—á', '–ù–∏–∂–µ –ø–ª–µ—á, –Ω–æ –≤—ã—à–µ –ª–æ–ø–∞—Ç–æ–∫',
                           '–ù–∏–∂–µ –ª–æ–ø–∞—Ç–æ–∫', '–ü–æ —Ç–∞–ª–∏—é']]
        await update.message.reply_text("–ö–∞–∫–∞—è –∏—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å?",
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return ASK_CAPSULES_OR_LENGTH

async def ask_density(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]['length_or_capsules'] = update.message.text
    reply_keyboard = [['–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ', '–°—Ä–µ–¥–Ω–µ–π –≥—É—Å—Ç–æ—Ç—ã', '–†–µ–¥–∫–∏–µ –≤–æ–ª–æ—Å—ã']]
    await update.message.reply_text("–ö–∞–∫–æ–≤–∞ –≥—É—Å—Ç–æ—Ç–∞ –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å?",
                                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return ASK_DENSITY

async def ask_desired_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]['density'] = update.message.text
    reply_keyboard = [['–ó–∞–≥—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏—Å–æ—á–Ω—ã–µ –∑–æ–Ω—ã', '–ó–∞–≥—É—Å—Ç–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏–Ω—É —Å–≤–æ–∏—Ö –≤–æ–ª–æ—Å',
                       '–í–æ–ª–æ—Å—ã –ø–æ –ª–æ–ø–∞—Ç–∫–∏/–ø–æ –≥—Ä—É–¥—å 45 —Å–º', '–í–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ª–æ–ø–∞—Ç–æ–∫ 50-55 —Å–º', '–í–æ–ª–æ—Å—ã –ø–æ —Ç–∞–ª–∏—é 60 —Å–º']]
    await update.message.reply_text("–ö–∞–∫–æ–π –¥–ª–∏–Ω—ã –≤–æ–ª–æ—Å—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ?",
                                    reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
    return ASK_DESIRED_LENGTH

async def calculate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.effective_chat.id]['desired_length'] = update.message.text
    data = user_data[update.effective_chat.id]

    price = "–¢—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"
    time = "‚Äî"

    combos = {
        ("–í–æ–ª–æ—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —É—à–∏", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–ó–∞–≥—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏—Å–æ—á–Ω—ã–µ –∑–æ–Ω—ã"): ("10.000-15.000‚ÇΩ", "1-1.5 —á–∞—Å–∞"),
        ("–í–æ–ª–æ—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —É—à–∏", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–ó–∞–≥—É—Å—Ç–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏–Ω—É —Å–≤–æ–∏—Ö –≤–æ–ª–æ—Å"): ("10.000-15.000‚ÇΩ", "1-1.5 —á–∞—Å–∞"),
        ("–í–æ–ª–æ—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —É—à–∏", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –ø–æ –ª–æ–ø–∞—Ç–∫–∏/–ø–æ –≥—Ä—É–¥—å 45 —Å–º"): ("30.000-35.000‚ÇΩ", "3 —á–∞—Å–∞"),
        ("–í–æ–ª–æ—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —É—à–∏", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ª–æ–ø–∞—Ç–æ–∫ 50-55 —Å–º"): ("40.000-45.000‚ÇΩ", "4-5 —á–∞—Å–æ–≤"),
        ("–í–æ–ª–æ—Å—ã –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ —É—à–∏", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –ø–æ —Ç–∞–ª–∏—é 60 —Å–º"): ("50.000‚ÇΩ", "5 —á–∞—Å–æ–≤"),
        ("–í—ã—à–µ –ø–ª–µ—á", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–ó–∞–≥—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏—Å–æ—á–Ω—ã–µ –∑–æ–Ω—ã"): ("10.000‚ÇΩ", "1 —á–∞—Å"),
        ("–í—ã—à–µ –ø–ª–µ—á", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–ó–∞–≥—É—Å—Ç–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –¥–ª–∏–Ω—É —Å–≤–æ–∏—Ö –≤–æ–ª–æ—Å"): ("10.000‚ÇΩ", "1-1.5 —á–∞—Å–∞"),
        ("–í—ã—à–µ –ø–ª–µ—á", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –ø–æ –ª–æ–ø–∞—Ç–∫–∏/–ø–æ –≥—Ä—É–¥—å 45 —Å–º"): ("30.000-35.000‚ÇΩ", "3-3.5 —á–∞—Å–∞"),
        ("–í—ã—à–µ –ø–ª–µ—á", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ª–æ–ø–∞—Ç–æ–∫ 50-55 —Å–º"): ("35.000-40.000‚ÇΩ", "3-4 —á–∞—Å–∞"),
        ("–í—ã—à–µ –ø–ª–µ—á", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –ø–æ —Ç–∞–ª–∏—é 60 —Å–º"): ("40.000‚ÇΩ", "4-5 —á–∞—Å–æ–≤"),
        ("–ù–∏–∂–µ –ø–ª–µ—á, –Ω–æ –≤—ã—à–µ –ª–æ–ø–∞—Ç–æ–∫", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–ó–∞–≥—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏—Å–æ—á–Ω—ã–µ –∑–æ–Ω—ã"): ("10.000‚ÇΩ", "1-1.5 —á–∞—Å–∞"),
        ("–ù–∏–∂–µ –ø–ª–µ—á, –Ω–æ –≤—ã—à–µ –ª–æ–ø–∞—Ç–æ–∫", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–ó–∞–≥—É—Å—Ç–∏—Ç—å –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –≤–æ–ª–æ—Å"): ("10.000-15.000‚ÇΩ", "1.5-2 —á–∞—Å–∞"),
        ("–ù–∏–∂–µ –ø–ª–µ—á, –Ω–æ –≤—ã—à–µ –ª–æ–ø–∞—Ç–æ–∫", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –ø–æ –ª–æ–ø–∞—Ç–∫–∏/–ø–æ –≥—Ä—É–¥—å 45 —Å–º"): ("30.000‚ÇΩ", "2-3 —á–∞—Å–∞"),
        ("–ù–∏–∂–µ –ø–ª–µ—á, –Ω–æ –≤—ã—à–µ –ª–æ–ø–∞—Ç–æ–∫", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –Ω–∏–∂–µ –ª–æ–ø–∞—Ç–æ–∫ 50-55 —Å–º"): ("30.000-35.000‚ÇΩ", "3-4 —á–∞—Å–∞"),
        ("–ù–∏–∂–µ –ø–ª–µ—á, –Ω–æ –≤—ã—à–µ –ª–æ–ø–∞—Ç–æ–∫", "–û—á–µ–Ω—å –≥—É—Å—Ç—ã–µ", "–í–æ–ª–æ—Å—ã –ø–æ —Ç–∞–ª–∏—é 60 —Å–º"): ("35.000-40.000‚ÇΩ", "4-5 —á–∞—Å–æ–≤"),
    }

    combo_key = (data.get('length_or_capsules'), data.get('density'), data.get('desired_length'))
    if combo_key in combos:
        price, time = combos[combo_key]

    await update.message.reply_text(f"üí∞ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price}
‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time}")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_PREVIOUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_capsules_or_length)],
            ASK_CAPSULES_OR_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_density)],
            ASK_DENSITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_desired_length)],
            ASK_DESIRED_LENGTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
